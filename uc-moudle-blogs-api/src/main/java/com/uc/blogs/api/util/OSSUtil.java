package com.uc.blogs.api.util;import com.aliyun.oss.HttpMethod;import com.aliyun.oss.OSS;import com.aliyun.oss.OSSClientBuilder;import com.aliyun.oss.model.PutObjectRequest;import com.aliyun.oss.model.PutObjectResult;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.multipart.MultipartFile;import java.io.ByteArrayInputStream;import java.io.File;import java.net.URL;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.Date;/** * @author 9527 * @ClassName OSSUtil * @Date 2020/4/4 * @Description TODO * @Version 1.0 */public class OSSUtil {    @Value("${OSS.endpoint}")    private static String endpoint;    @Value("${OSS.accessKeyId}")    private static String accessKeyId;    @Value("${OSS.accessKeySecret}")    private static String accessKeySecret;    @Value("${OSS.bucketName}")    private static String bucketName;    @Value("${OSS.uploadPath}")    private static String OSSUploadPath;    @Value("${DISK.uploadPath}")    private static String diskUploadPath;    private static OSS OSSClient = null;    private static OSS getInstance(){        if(OSSClient == null){            OSSClient = new OSSClientBuilder().build(endpoint,accessKeyId,accessKeySecret);        }        return OSSClient;    }    /**     *     * @param bytes     * @param fileName     * @return     */    public static String uploadFileOSS(ByteArrayInputStream bytes,String fileName){        String path = null;        try {            OSSClient = getInstance();            if(OSSClient.doesBucketExist(bucketName)){                path = OSSUploadPath.concat(LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"))).concat("/").concat(fileName);                PutObjectRequest objectRequest = new PutObjectRequest(bucketName,path,bytes);                OSSClient.putObject(objectRequest);            }        }catch (Exception e){            e.printStackTrace();        }finally {            OSSClient.shutdown();        }        return path;    }    public static String uploadFileDisk(MultipartFile multipartFile){        String url = null;        try {            String fileName = multipartFile.getOriginalFilename();            String filePath = diskUploadPath.concat(LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"))).concat("/").concat(fileName);            File file = new File(filePath);            if(!file.exists() && !file.isDirectory()){                file.mkdir();            }            multipartFile.transferTo(file);            url =filePath;        }catch (Exception e){            e.printStackTrace();        }        return url;    }    /**     * @param bucketName     * @param filePath 数据库存储路径     * @param expiration     * 设置URL过期时间为1小时。Date expiration = new Date(System.currentTimeMillis() + 3600 * 1000);     * @param method     * @return     */    public static String previewAndDownloadFileUrl(String filePath, Date expiration, HttpMethod method){        String url = null;        try {            OSSClient = getInstance();            if(OSSClient.doesBucketExist(bucketName)){               URL uri = OSSClient.generatePresignedUrl(bucketName,filePath,expiration,method);                url = uri.toString();            }        }catch (Exception e){            e.printStackTrace();        }finally {            OSSClient.shutdown();        }        return url;    }}