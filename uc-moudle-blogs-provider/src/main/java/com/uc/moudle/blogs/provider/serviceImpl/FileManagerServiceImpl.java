package com.uc.moudle.blogs.provider.serviceImpl;import com.aliyun.oss.HttpMethod;import com.google.common.collect.Lists;import com.uc.blogs.api.constant.FileManagerConstant;import com.uc.blogs.api.enums.ErrorCode;import com.uc.blogs.api.exception.BlogsMoudleException;import com.uc.blogs.api.service.FileManagerService;import com.uc.blogs.api.util.OSSUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RequestPart;import org.springframework.web.multipart.MultipartFile;import java.io.ByteArrayInputStream;import java.io.IOException;import java.util.*;/** * @author 9527 * @ClassName FileManagerServiceImpl * @Date 2020/4/4 * @Description TODO * @Version 1.0 */@Service@Transactional(readOnly = true,rollbackFor = {Exception.class})public class FileManagerServiceImpl implements FileManagerService {    private Logger logger = LoggerFactory.getLogger(FileManagerServiceImpl.class);    @Override    public Map multiFileUpload( MultipartFile[] multipartFiles,  String uploadType) throws BlogsMoudleException, IOException {        logger.info("文件上传service");        Map<String, List<String>> result = new HashMap<>();        List<String> successArr = Lists.newArrayList();        List<String> failArr = Lists.newArrayList();        if(!FileManagerConstant.FILE_UPLOAD_TYPE.contains(uploadType)){            throw new BlogsMoudleException(ErrorCode.UNSUPPORTED_UPLOAD_TYPE,ErrorCode.UNSUPPORTED_UPLOAD_TYPE.getMessage());        }        if(Objects.equals(uploadType,FileManagerConstant.FILE_UPLOAD_TYPE_OSS)){            for (MultipartFile file:multipartFiles) {                String fileName = file.getOriginalFilename();                if(!FileManagerConstant.LIMIT_FILE_TYPE.contains(fileName.substring(fileName.lastIndexOf(".")+1))){                    failArr.add(fileName);                    continue;                }                String path = OSSUtil.uploadFileOSS(new ByteArrayInputStream(file.getBytes()),fileName);                if(path == null){                    failArr.add(fileName);                }else {                    String previewPath = OSSUtil.previewAndDownloadFileUrl(path,new Date(System.currentTimeMillis() + 3600 * 1000), HttpMethod.GET);                    successArr.add(path);                }            }        }        if(Objects.equals(uploadType,FileManagerConstant.FILE_UPLOAD_TYPE_DISK)){            for (MultipartFile file: multipartFiles) {               String url = OSSUtil.uploadFileDisk(file);               if(url == null){                   failArr.add(file.getOriginalFilename());               }else {                   successArr.add(url);               }            }        }        result.put("success",successArr);        result.put("fail",failArr);        return result;    }}