package com.uc.moudle.blogs.provider.config.aop;import com.ucs.moudlecommon.params.CommonParamsMoudle;import com.ucs.moudlecommon.util.AESUtil;import com.uc.blogs.api.constant.SignatureConstant;import com.uc.blogs.api.enums.ErrorCode;import com.uc.blogs.api.exception.ParamIllegalException;import com.uc.blogs.api.exception.SignatureFailException;import org.apache.commons.lang3.StringUtils;import org.apache.ibatis.javassist.ClassClassPath;import org.apache.ibatis.javassist.ClassPool;import org.apache.ibatis.javassist.CtClass;import org.apache.ibatis.javassist.CtMethod;import org.apache.ibatis.javassist.bytecode.CodeAttribute;import org.apache.ibatis.javassist.bytecode.LocalVariableAttribute;import org.apache.ibatis.javassist.bytecode.MethodInfo;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import java.io.UnsupportedEncodingException;import java.lang.reflect.Modifier;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;import java.util.Objects;/** * @author 9527 * @ClassName RequestInterceptorAspect * @Date 2020/3/10 * @Description TODO * @Version 1.0 */@Aspect@Componentpublic class RequestInterceptorAspect {    private Logger logger = LoggerFactory.getLogger(RequestInterceptorAspect.class);    @Pointcut("execution(* com.uc.moudle.blogs.provider.serviceImpl.*.*(..))")    public void checkAop(){    }    @Before("checkAop()")    public void profile(JoinPoint args) throws ParamIllegalException, UnsupportedEncodingException, SignatureFailException {        if(args.getArgs().length == 0){            throw new ParamIllegalException("请求参数为空",ErrorCode.PARAM_ILLEGAL);        }    }    @AfterThrowing(value = "checkAop()", throwing = "e")    public void doAfterThrowingAdvice(JoinPoint joinPoint, Exception e) throws Exception {        if (e instanceof ParamIllegalException || e instanceof SignatureFailException) {            logger.warn("异常方法:{}.{}", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());            logger.warn("异常信息:", e);        } else {            logger.error("异常方法:{}.{}", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());            logger.error("参数信息:{}", getNameAndArgs(joinPoint));            logger.error("异常信息:", e);        }    }    private Map<String, Object> getNameAndArgs(JoinPoint joinPoint) throws Exception {        String classType = joinPoint.getTarget().getClass().getName();        Class<?> clazz = Class.forName(classType);        String clazzName = clazz.getName();        String methodName = joinPoint.getSignature().getName();        return this.getFieldsName(this.getClass(), clazzName, methodName, joinPoint.getArgs());    }    private Map<String, Object> getFieldsName(Class cls, String clazzName, String methodName, Object[] args) throws Exception {        Map<String, Object> map = new LinkedHashMap<>();        ClassPool pool = ClassPool.getDefault();        ClassClassPath classPath = new ClassClassPath(cls);        pool.insertClassPath(classPath);        CtClass cc = pool.get(clazzName);        CtMethod cm = cc.getDeclaredMethod(methodName);        MethodInfo methodInfo = cm.getMethodInfo();        CodeAttribute codeAttribute = methodInfo.getCodeAttribute();        LocalVariableAttribute attr = (LocalVariableAttribute) codeAttribute.getAttribute(LocalVariableAttribute.tag);        int pos = Modifier.isStatic(cm.getModifiers()) ? 0 : 1;        for (int i = 0; i < cm.getParameterTypes().length; i++) {            map.put(attr.variableName(i + pos), args[i]);        }        return map;    }}