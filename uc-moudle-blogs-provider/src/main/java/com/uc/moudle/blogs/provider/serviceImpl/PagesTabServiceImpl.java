package com.uc.moudle.blogs.provider.serviceImpl;import com.uc.blogs.api.constant.PagesRedirectConstant;import com.uc.blogs.api.enums.ErrorCode;import com.uc.blogs.api.exception.BlogsMoudleException;import com.uc.blogs.api.moudle.Menu;import com.uc.moudle.blogs.provider.config.redis.RedisBusiness;import com.uc.moudle.blogs.provider.mapper.PagesTabMapper;import com.uc.blogs.api.constant.RedisPrefixConstant;import com.uc.blogs.api.entity.UcPagesTab;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.uc.blogs.api.service.PagesTabService;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.List;import java.util.Objects;import java.util.stream.Collectors;/** * @author 9527 * @ClassName PagesTabServiceImpl * @Date 2020/3/10 * @Description TODO * @Version 1.0 */@Service@Transactional(readOnly = true,rollbackFor = {Exception.class})public class PagesTabServiceImpl implements PagesTabService {    @Autowired    private PagesTabMapper pagesTabMapper;    @Autowired    private RedisBusiness redisBusiness;    @Override    @Transactional(propagation = Propagation.REQUIRES_NEW,rollbackFor = {Exception.class})    public List<Menu> findAllNormalTabsByUser(Integer userId) throws Exception{        if(userId == null){            throw new BlogsMoudleException(ErrorCode.PARAM_ILLEGAL,"请求参数有误");        }        List<Menu> cacheMenus  = (List<Menu> )redisBusiness.get(RedisPrefixConstant.TAB_PREFIX.concat(userId.toString()));        if(Objects.isNull(cacheMenus)){            List<Menu> menus = new ArrayList<>();            List<UcPagesTab> tabs = pagesTabMapper.queryUserTabs(0,userId);            List<UcPagesTab> finalTabs = tabs;            List<UcPagesTab> folders = tabs.stream().filter(tab -> tab.getTabLevel() == 1).collect(Collectors.toList());            folders.stream().forEach(f ->{                Menu menu = new Menu();                menu.setTabName(f.getTabName());                if(PagesRedirectConstant.redirects.containsKey(f.getTabUrlSign())){                    menu.setId(f.getId());                    menu.setTabLevel(f.getTabLevel());                    menu.setTabOrder(f.getTabOrder());                    menu.setTabUrl(PagesRedirectConstant.redirects.get(f.getTabUrlSign()));                }else{                    List<UcPagesTab> children = finalTabs.stream().filter(x -> x.getTabParentId() == f.getId()).collect(Collectors.toList());                    menu.setChildren(children);                }                menus.add(menu);            });            redisBusiness.set(RedisPrefixConstant.TAB_PREFIX.concat(userId.toString()),menus);            cacheMenus = menus;        }        return cacheMenus;    }}